Non Terminals:
<program>: {'id', 'cos', 'exp', 'log', 'if', 'rand', 'type', 'new', 'function', 'while', '{', 'for', 'string', '!', 'true', 'print', 'false', 'E', 'PI', 'let', '(', 'sqrt', 'num', 'sin'}-False
<exp>: set()-False
<statement_seq>: {'type', 'function'}-False
<statement>: {'type', 'function'}-False
<inline_func_def>: set()-False
<block_func_def>: set()-False
<num_exp>: {'cos', 'id', 'exp', 'string', 'log', 'rand', 'true', 'false', 'E', 'PI', '(', 'sqrt', 'num', 'sin'}-False
<term>: {'cos', 'id', 'exp', 'string', 'log', 'rand', 'true', 'false', 'E', 'PI', '(', 'sqrt', 'num', 'sin'}-False
<factor>: {'cos', 'id', 'exp', 'string', 'log', 'rand', 'true', 'false', 'E', 'PI', '(', 'sqrt', 'num', 'sin'}-False
<const>: {'cos', 'id', 'exp', 'string', 'log', 'rand', 'true', 'false', 'E', 'PI', '(', 'sqrt', 'num', 'sin'}-False
<math_func>: set()-False
<func_call>: {'id'}-False
<type_prop_func_call>: {'id'}-False
<str_exp>: {'cos', 'id', 'exp', 'string', 'log', 'rand', 'true', 'false', 'E', 'PI', '(', 'sqrt', 'num', 'sin'}-False
<str_const>: {'cos', 'id', 'exp', 'string', 'log', 'rand', 'true', 'false', 'E', 'PI', '(', 'sqrt', 'num', 'sin'}-False
<math_func>: {'cos', 'exp', 'sqrt', 'log', 'sin', 'rand'}-False
<bool_exp>: {'cos', 'id', 'exp', 'string', 'log', 'rand', '!', 'true', 'false', 'E', 'PI', '(', 'sqrt', 'num', 'sin'}-False
<bool_term>: {'cos', 'id', 'exp', 'string', 'log', 'rand', '!', 'true', 'false', 'E', 'PI', '(', 'sqrt', 'num', 'sin'}-False
<bool_factor>: {'cos', 'id', 'exp', 'string', 'log', 'rand', '!', 'true', 'false', 'E', 'PI', '(', 'sqrt', 'num', 'sin'}-False
<bool_cmp>: {'cos', 'id', 'exp', 'string', 'log', 'rand', 'true', 'false', 'E', 'PI', '(', 'sqrt', 'num', 'sin'}-False
<bool_const>: {'cos', 'id', 'exp', 'string', 'log', 'rand', 'true', 'false', 'E', 'PI', '(', 'sqrt', 'num', 'sin'}-False
<conditionals_exp>: {'if'}-False
<elif_list>: {'elif'}-False
<loop_exp>: {'for', 'while'}-False
<range_exp>: {'range'}-False
<exp>: {'id', 'for', 'cos', 'exp', 'string', 'log', 'if', 'rand', '!', 'true', 'print', 'false', 'new', 'sin', 'E', 'PI', 'while', '(', 'let', 'sqrt', 'num', '{'}-False
<base_element>: {'id', 'true', 'string', 'false'}-False
<var_def>: {'let'}-False
<var_def_list>: {'id'}-False
<destr_assignment>: {'id'}-False
<inline_func_def>: {'function'}-False
<exp_list>: {'id', 'cos', 'exp', 'log', 'if', 'rand', 'new', 'while', '{', 'for', 'string', '!', 'true', 'print', 'false', 'E', 'PI', 'let', '(', 'sqrt', 'num', 'sin'}-False
<block_func_def>: {'function'}-False
<block_exp>: {'{'}-False
<block_items>: {'id', 'cos', 'exp', 'log', 'if', 'rand', 'new', 'while', '{', 'for', 'string', '!', 'true', 'print', 'false', 'E', 'PI', 'let', '(', 'sqrt', 'num', 'sin'}-False
<type_def>: {'type'}-False
<type_header_def>: {'type'}-False
<type_body>: {'{'}-False
<type_body_statements>: {'id'}-False
<type_body_item>: {'id'}-False
<type_body_prop>: {'id'}-False
<type_body_func>: {'id'}-False
<type_instance>: {'new'}-False
S': {'id', 'cos', 'exp', 'log', 'if', 'rand', 'type', 'new', 'function', 'while', '{', 'for', 'string', '!', 'true', 'print', 'false', 'E', 'PI', 'let', '(', 'sqrt', 'num', 'sin'}-False

Sentences:
<statement_seq> <exp>: {'type', 'function'}-False
<exp>: {'id', 'cos', 'exp', 'log', 'if', 'rand', 'new', 'while', '{', 'for', 'string', '!', 'true', 'print', 'false', 'E', 'PI', 'let', '(', 'sqrt', 'num', 'sin'}-False
<statement>: {'type', 'function'}-False
<statement> <statement_seq>: {'type', 'function'}-False
<inline_func_def>: {'function'}-False
<block_func_def>: {'function'}-False
<type_def>: {'type'}-False
function id ( <exp_list> ) => <exp> ;: {'function'}-False
function id ( ) => <exp> ;: {'function'}-False
function id ( <exp_list> ) <block_exp>: {'function'}-False
function id ( ) <block_exp>: {'function'}-False
{ <block_items> }: {'{'}-False
<exp> ;: {'id', 'cos', 'exp', 'log', 'if', 'rand', 'new', 'while', '{', 'for', 'string', '!', 'true', 'print', 'false', 'E', 'PI', 'let', '(', 'sqrt', 'num', 'sin'}-False
<exp> ; <block_items>: {'id', 'cos', 'exp', 'log', 'if', 'rand', 'new', 'while', '{', 'for', 'string', '!', 'true', 'print', 'false', 'E', 'PI', 'let', '(', 'sqrt', 'num', 'sin'}-False
<exp> , <exp_list>: {'id', 'cos', 'exp', 'log', 'if', 'rand', 'new', 'while', '{', 'for', 'string', '!', 'true', 'print', 'false', 'E', 'PI', 'let', '(', 'sqrt', 'num', 'sin'}-False
let <var_def_list> in <exp>: {'let'}-False
id = <exp>: {'id'}-False
id = <exp> , <var_def_list>: {'id'}-False
id := <exp>: {'id'}-False
print ( <exp> ): {'print'}-False
<var_def>: {'let'}-False
<destr_assignment>: {'id'}-False
<conditionals_exp>: {'if'}-False
<loop_exp>: {'for', 'while'}-False
<type_instance>: {'new'}-False
<block_exp>: {'{'}-False
<bool_exp>: {'cos', 'id', 'exp', 'string', 'log', 'rand', '!', 'true', 'false', 'E', 'PI', '(', 'sqrt', 'num', 'sin'}-False
<type_header_def> ;: {'type'}-False
type id inherits id <type_body> ;: {'type'}-False
type id ( <exp_list> ) inherits id ( <exp_list> ) <type_body> ;: {'type'}-False
type id ( <exp_list> ) <type_body>: {'type'}-False
type id <type_body>: {'type'}-False
{ }: {'{'}-False
{ <type_body_statements> }: {'{'}-False
<type_body_item>: {'id'}-False
<type_body_item> <type_body_statements>: {'id'}-False
<type_body_prop>: {'id'}-False
<type_body_func>: {'id'}-False
id = <exp> ;: {'id'}-False
id ( <exp_list> ) => <exp>: {'id'}-False
id ( ) => <exp>: {'id'}-False
id ( <exp_list> ) <block_exp>: {'id'}-False
id ( ) <block_exp>: {'id'}-False
new id ( <exp_list> ): {'new'}-False
new id ( ): {'new'}-False
if ( <bool_exp> ) <exp> else <exp>: {'if'}-False
if ( <bool_exp> ) <exp> <elif_list> else <exp>: {'if'}-False
elif ( <bool_exp> ) <exp>: {'elif'}-False
elif ( <bool_exp> ) <exp> <elif_list>: {'elif'}-False
while ( <bool_exp> ) <exp>: {'while'}-False
for ( id in <range_exp> ) <exp>: {'for'}-False
range ( <num_exp> , <num_exp> ): {'range'}-False
<bool_exp> | <bool_term>: {'cos', 'id', 'exp', 'string', 'log', 'rand', '!', 'true', 'false', 'E', 'PI', '(', 'sqrt', 'num', 'sin'}-False
<bool_term>: {'cos', 'id', 'exp', 'string', 'log', 'rand', '!', 'true', 'false', 'E', 'PI', '(', 'sqrt', 'num', 'sin'}-False
<bool_term> & <bool_factor>: {'cos', 'id', 'exp', 'string', 'log', 'rand', '!', 'true', 'false', 'E', 'PI', '(', 'sqrt', 'num', 'sin'}-False
<bool_factor>: {'cos', 'id', 'exp', 'string', 'log', 'rand', '!', 'true', 'false', 'E', 'PI', '(', 'sqrt', 'num', 'sin'}-False
! <bool_factor>: {'!'}-False
<bool_cmp>: {'cos', 'id', 'exp', 'string', 'log', 'rand', 'true', 'false', 'E', 'PI', '(', 'sqrt', 'num', 'sin'}-False
<bool_cmp> == <bool_const>: {'cos', 'id', 'exp', 'string', 'log', 'rand', 'true', 'false', 'E', 'PI', '(', 'sqrt', 'num', 'sin'}-False
<bool_cmp> != <bool_const>: {'cos', 'id', 'exp', 'string', 'log', 'rand', 'true', 'false', 'E', 'PI', '(', 'sqrt', 'num', 'sin'}-False
<bool_cmp> < <bool_const>: {'cos', 'id', 'exp', 'string', 'log', 'rand', 'true', 'false', 'E', 'PI', '(', 'sqrt', 'num', 'sin'}-False
<bool_cmp> > <bool_const>: {'cos', 'id', 'exp', 'string', 'log', 'rand', 'true', 'false', 'E', 'PI', '(', 'sqrt', 'num', 'sin'}-False
<bool_cmp> >= <bool_const>: {'cos', 'id', 'exp', 'string', 'log', 'rand', 'true', 'false', 'E', 'PI', '(', 'sqrt', 'num', 'sin'}-False
<bool_cmp> <= <bool_const>: {'cos', 'id', 'exp', 'string', 'log', 'rand', 'true', 'false', 'E', 'PI', '(', 'sqrt', 'num', 'sin'}-False
<bool_const>: {'cos', 'id', 'exp', 'string', 'log', 'rand', 'true', 'false', 'E', 'PI', '(', 'sqrt', 'num', 'sin'}-False
<str_exp>: {'cos', 'id', 'exp', 'string', 'log', 'rand', 'true', 'false', 'E', 'PI', '(', 'sqrt', 'num', 'sin'}-False
<str_exp> @ <str_const>: {'cos', 'id', 'exp', 'string', 'log', 'rand', 'true', 'false', 'E', 'PI', '(', 'sqrt', 'num', 'sin'}-False
<str_exp> @@ <str_const>: {'cos', 'id', 'exp', 'string', 'log', 'rand', 'true', 'false', 'E', 'PI', '(', 'sqrt', 'num', 'sin'}-False
<str_const>: {'cos', 'id', 'exp', 'string', 'log', 'rand', 'true', 'false', 'E', 'PI', '(', 'sqrt', 'num', 'sin'}-False
<num_exp>: {'cos', 'id', 'exp', 'string', 'log', 'rand', 'true', 'false', 'E', 'PI', '(', 'sqrt', 'num', 'sin'}-False
<num_exp> + <term>: {'cos', 'id', 'exp', 'string', 'log', 'rand', 'true', 'false', 'E', 'PI', '(', 'sqrt', 'num', 'sin'}-False
<num_exp> - <term>: {'cos', 'id', 'exp', 'string', 'log', 'rand', 'true', 'false', 'E', 'PI', '(', 'sqrt', 'num', 'sin'}-False
<term>: {'cos', 'id', 'exp', 'string', 'log', 'rand', 'true', 'false', 'E', 'PI', '(', 'sqrt', 'num', 'sin'}-False
<term> * <factor>: {'cos', 'id', 'exp', 'string', 'log', 'rand', 'true', 'false', 'E', 'PI', '(', 'sqrt', 'num', 'sin'}-False
<term> / <factor>: {'cos', 'id', 'exp', 'string', 'log', 'rand', 'true', 'false', 'E', 'PI', '(', 'sqrt', 'num', 'sin'}-False
<term> % <factor>: {'cos', 'id', 'exp', 'string', 'log', 'rand', 'true', 'false', 'E', 'PI', '(', 'sqrt', 'num', 'sin'}-False
<factor>: {'cos', 'id', 'exp', 'string', 'log', 'rand', 'true', 'false', 'E', 'PI', '(', 'sqrt', 'num', 'sin'}-False
<factor> ^ <const>: {'cos', 'id', 'exp', 'string', 'log', 'rand', 'true', 'false', 'E', 'PI', '(', 'sqrt', 'num', 'sin'}-False
<const>: {'cos', 'id', 'exp', 'string', 'log', 'rand', 'true', 'false', 'E', 'PI', '(', 'sqrt', 'num', 'sin'}-False
( <num_exp> ): {'('}-False
num: {'num'}-False
E: {'E'}-False
PI: {'PI'}-False
<math_func>: {'cos', 'exp', 'log', 'rand', 'sqrt', 'sin'}-False
<base_element>: {'id', 'string', 'true', 'false'}-False
string: {'string'}-False
true: {'true'}-False
false: {'false'}-False
id: {'id'}-False
<func_call>: {'id'}-False
<type_prop_func_call>: {'id'}-False
id ( <exp_list> ): {'id'}-False
id . id ( ): {'id'}-False
id . id ( <exp_list> ): {'id'}-False
id . id: {'id'}-False
sqrt ( <num_exp> ): {'sqrt'}-False
sin ( <num_exp> ): {'sin'}-False
cos ( <num_exp> ): {'cos'}-False
exp ( <num_exp> ): {'exp'}-False
log ( <num_exp> , <num_exp> ): {'log'}-False
rand ( ): {'rand'}-False
<program>: {'id', 'cos', 'exp', 'log', 'if', 'rand', 'type', 'new', 'function', 'while', '{', 'for', 'string', '!', 'true', 'print', 'false', 'E', 'PI', 'let', '(', 'sqrt', 'num', 'sin'}-False
